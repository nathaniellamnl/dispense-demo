{"version":3,"sources":["components/Patient/PatientProfile/TransactionRecord/TransactionRecord.module.css","../node_modules/@material-ui/icons/Print.js","components/Patient/PatientProfile/TransactionRecord/TransactionRecord.js"],"names":["module","exports","_interopRequireDefault","require","Object","defineProperty","value","default","_react","_default","createElement","d","TransactionEntry","React","lazy","makeStyles","table","minWidth","TransactionRecord","props","useState","open","transactionId","openEntry","setOpenEntry","openDeleteModal","setOpenDeleteModal","transactionRecord","setTransactionRecord","isDeleting","setIsDeleting","longestEntryLength","setLongestEntryLength","fn","items","filterFn","headCells","id","label","disableSorting","Array","map","x","i","drugItemKey","drugQtyKey","useTable","TblContainer","TblHead","TblPagination","recordsAfterPaginationAndSorting","openEntryHandler","closeEntryHandler","closeDeleteModalHandler","useEffect","requestBody","query","variables","patientId","fetch","graphqlServerUrl","method","body","JSON","stringify","headers","localStorage","getItem","then","res","status","Error","json","resData","console","log","data","transactions","ele","amount","catch","err","alert","length","tx","Math","max","drugs","operationHandler","operation","entry","transactionRecordCopy","indexDelete","findIndex","_id","splice","indexUpdate","push","className","classescss","patientInfo","caseCode","chineseName","englishName","show","modalClosed","fallback","token","cancelModal","entryChangeHandler","style","fontSize","buttonNames","action","cancel","onClick","fill","cursor","row","index","key","background","align","width","window","quantities","transactionDate","substring"],"mappings":"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","file":"static/js/5.dd77a661.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon-container\":\"TransactionRecord_icon-container__9PZ9A\",\"section-child\":\"TransactionRecord_section-child__r7ML2\",\"spacer\":\"TransactionRecord_spacer__1PcQz\",\"record-container\":\"TransactionRecord_record-container__1gyiH\"};","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3zm-3 11H8v-5h8v5zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1-9H6v4h12V3z\"\n}), 'Print');\n\nexports.default = _default;","import React, { Fragment, useState, useEffect, Suspense } from 'react';\r\nimport useTable from '../../../../UI/Table/useTable';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {  TableBody, TableCell, TableRow, Paper, IconButton } from '@material-ui/core';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport Loader from '../../../../UI/Loader/Loader';\r\nimport Button from '../../../../UI/Button/Button';\r\nimport { graphqlServerUrl } from '../../../../assets/String';\r\nimport Modal from '../../../../UI/Modal/Modal';\r\nimport classescss from './TransactionRecord.module.css';\r\nconst TransactionEntry = React.lazy(() => import('./TransactionEntry/TransactionEntry'));\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 400,\r\n    },\r\n});\r\n\r\nconst TransactionRecord = (props) => {\r\n\r\n    const [openEntry, setOpenEntry] = useState({ open: false, transactionId: null });\r\n    const [openDeleteModal, setOpenDeleteModal] = useState({ open: false, transactionId: null });\r\n    const [transactionRecord, setTransactionRecord] = useState();\r\n    const [isDeleting, setIsDeleting] = useState(false);\r\n    const [longestEntryLength, setLongestEntryLength] = useState(0);\r\n    const [filterFn, setFilterFn] = useState({\r\n        fn: items => items,\r\n        value: null\r\n    });\r\n\r\n    const headCells = [\r\n        { id: \"edit\", label: \"Edit\", disableSorting: true },\r\n        { id: 'print', label: \"print\", disableSorting: true },\r\n        [...Array(longestEntryLength)].map((x, i) => {\r\n            let drugItemKey = \"drugItem\" + (+(i + 1));\r\n            let drugQtyKey = \"drugQty\" + (+(i + 1));\r\n            return {\r\n                [drugItemKey]: {\r\n                    id: \"drugItem\" + (+(i + 1)), label: \"Drug Item \" + (+(i + 1))\r\n                },\r\n                [drugQtyKey]: {\r\n                    id: \"drugQty\" + (+(i + 1)), label: \"Drug Qty \" + (+(i + 1))\r\n                }\r\n            }\r\n        }),\r\n        { id: \"amount\", label: \"Paid Amount\" },\r\n        { id: \"transactionDate\", label: \"Transaction Date\" }\r\n    ];\r\n\r\n    const {\r\n        TblContainer,\r\n        TblHead,\r\n        TblPagination,\r\n        recordsAfterPaginationAndSorting\r\n    } = useTable(transactionRecord, headCells, filterFn,[1,2,3]);\r\n\r\n    const openEntryHandler = (transactionId) => {\r\n        setOpenEntry({ open: true, transactionId: transactionId });\r\n    }\r\n\r\n    const closeEntryHandler = () => {\r\n        setOpenEntry({ open: false, transactionId: null });\r\n    }\r\n\r\n    const openDeleteModalHandler = (transactionId) => {\r\n        setOpenDeleteModal({ open: true, transactionId: transactionId });\r\n    }\r\n\r\n    const closeDeleteModalHandler = () => {\r\n        setOpenDeleteModal({ open: false, transactionId: null });\r\n    }\r\n\r\n    const deleteHandler = () => {\r\n        const requestBody = {\r\n            query: `\r\n                 mutation DeleteTransaction($transactionId:ID!) {\r\n                   deleteTransaction(_id:$transactionId)\r\n                 }\r\n              `,\r\n            variables: {\r\n                transactionId: openDeleteModal.transactionId\r\n            }\r\n        };\r\n\r\n        setIsDeleting(true);\r\n        fetch(graphqlServerUrl, {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('dispenseToken')\r\n            }\r\n        }).then(res => {\r\n            if (res.status !== 200 && res.status !== 201) {\r\n                throw new Error(\"Failed\");\r\n            }\r\n            return res.json();\r\n        }).then(resData => {\r\n            setIsDeleting(false);\r\n            closeDeleteModalHandler();\r\n            operationHandler(\"delete\", openDeleteModal.transactionId, null);\r\n        }).catch(err => {\r\n            alert(err);\r\n            setIsDeleting(false);\r\n        })\r\n    }\r\n\r\n    //fetch transactionrecord\r\n    useEffect(() => {\r\n        const requestBody = {\r\n            query: `\r\n                 query Transactions($id:ID) {\r\n                   transactions(_id:$id) {\r\n                    _id\r\n                    transactionDate\r\n                    drugs\r\n                    quantities\r\n                    remark\r\n                    amount\r\n                   }\r\n                 }\r\n              `,\r\n            variables: {\r\n                id: props.patientId\r\n            }\r\n        };\r\n        fetch(graphqlServerUrl, {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('dispenseToken')\r\n            }\r\n        }).then(res => {\r\n            if (res.status !== 200 && res.status !== 201) {\r\n                throw new Error(\"Failed\");\r\n            }\r\n            return res.json();\r\n        }).then(resData => {\r\n            console.log(resData.data.transactions);\r\n            resData.data.transactions.map(ele => {\r\n                ele.amount = +ele.amount;\r\n            })\r\n            setTransactionRecord(resData.data.transactions);\r\n\r\n        }).catch(err => {\r\n            alert(err);\r\n        })\r\n    }, [props]);\r\n\r\n    useEffect(() => {\r\n        if (transactionRecord) {\r\n            let length = 0;\r\n            transactionRecord.map((tx) => {\r\n                length = Math.max(length, tx.drugs.length);\r\n            })\r\n\r\n            setLongestEntryLength(length);\r\n        }\r\n    }, [transactionRecord]);\r\n\r\n    const openInNewTab = (id) => {\r\n        const newWindow = window.open(\"/print/\" + id, '_blank', 'noopener,noreferrer')\r\n        // if (newWindow) newWindow.opener = null\r\n    }\r\n\r\n    const operationHandler = (operation, id, entry) => {\r\n        const transactionRecordCopy = [...transactionRecord];\r\n        switch (operation) {\r\n            case \"delete\":\r\n                const indexDelete = transactionRecordCopy.findIndex(ele => ele._id === id);\r\n                transactionRecordCopy.splice(indexDelete, 1);\r\n                setTransactionRecord(transactionRecordCopy);\r\n                break;\r\n            case \"update\":\r\n                const indexUpdate = transactionRecordCopy.findIndex(ele => ele._id === id);\r\n                transactionRecordCopy[indexUpdate] = { ...entry };\r\n                // transactionRecordCopy.sort((a, b) => {\r\n                //     return new Date(b.transactionDate) - new Date(a.transactionDate);\r\n                // })\r\n                setTransactionRecord(transactionRecordCopy);\r\n                break;\r\n            case \"create\":\r\n                transactionRecordCopy.push({ ...entry });\r\n                // transactionRecordCopy.sort((a, b) => {\r\n                //     return new Date(b.transactionDate) - new Date(a.transactionDate);\r\n                // })\r\n                console.log(transactionRecordCopy);\r\n                setTransactionRecord(transactionRecordCopy);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classescss[\"record-container\"]}>\r\n                <h2>{props.patientInfo[0].caseCode + \" \" + props.patientInfo[0].chineseName + \"(\" + props.patientInfo[0].englishName + \")\"}</h2>\r\n\r\n                {/* Modal pops up when clicked */}\r\n                <Modal show={openEntry.open} modalClosed={closeEntryHandler}>\r\n                    <Suspense fallback={<div>Loading...</div>}>\r\n                        <TransactionEntry\r\n                            token={localStorage.getItem('dispenseToken')}\r\n                            cancelModal={closeEntryHandler}\r\n                            patientId={props.patientId}\r\n                            transactionId={openEntry.transactionId}\r\n                            entryChangeHandler={operationHandler}\r\n                        />\r\n                    </Suspense>\r\n                </Modal>\r\n                <Modal show={openDeleteModal.open} modalClosed={closeDeleteModalHandler}>\r\n                    {isDeleting ? <Loader /> :\r\n                        <Fragment>\r\n                            <p style={{ fontSize: \"large\" }}>Are you sure you want to delete this transaction entry?</p>\r\n                            <Button buttonNames={[\"Delete\", \"Cancel\"]} action={deleteHandler} cancel={closeDeleteModalHandler} />\r\n                        </Fragment>}\r\n                </Modal>\r\n\r\n                <div className={classescss['icon-container']}>\r\n                    <IconButton onClick={() => openEntryHandler(null)}>\r\n                        <AddCircleIcon style={{ fill: \"green\", cursor: 'pointer' }} />\r\n                    </IconButton>\r\n                    <span>Add new entry</span>\r\n                </div>\r\n                {transactionRecord && transactionRecord.length === 0 ?\r\n                    <p>The patient does not have any transaction record.</p> :\r\n                    <Paper>\r\n                        <TblContainer>\r\n                            <TblHead />\r\n                            <TableBody>\r\n                                {transactionRecord ?\r\n                                    recordsAfterPaginationAndSorting().map((row, index) => (\r\n                                        <TableRow key={row._id} style={index % 2 ? { background: \"#e9e9e9\" } : { background: \"white\" }}>\r\n                                            <TableCell align=\"left\" width=\"20%\">\r\n                                                <IconButton onClick={() => openEntryHandler(row._id)}>\r\n                                                    <EditIcon style={{ fill: \"#1053ab\", cursor: 'pointer' }} />\r\n                                                </IconButton>\r\n                                                <IconButton onClick={() => openDeleteModalHandler(row._id)}>\r\n                                                    <DeleteIcon style={{ fill: \"black\", cursor: 'pointer' }} />\r\n                                                </IconButton>\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\" width=\"20%\">\r\n                                                <IconButton onClick={() => openInNewTab(row._id)}>\r\n                                                    <PrintIcon style={{ fill: \"#ab9910\", cursor: 'pointer' }} />\r\n                                                </IconButton>\r\n                                            </TableCell>\r\n                                            {[...Array(longestEntryLength)].map((x, i) =>\r\n                                                <Fragment key={i}>\r\n                                                    <TableCell align=\"left\" width=\"10%\">{i >= row.drugs ? null : row.drugs[i]}</TableCell>\r\n                                                    <TableCell align=\"left\" width=\"10%\">{i >= row.quantities ? null : row.quantities[i]}</TableCell>\r\n                                                </Fragment>\r\n                                            )}\r\n                                            <TableCell align=\"left\" width=\"20%\">{row.amount}</TableCell>\r\n                                            <TableCell align=\"left\" width=\"20%\">{row.transactionDate.substring(0, 10)}</TableCell>\r\n                                        </TableRow>\r\n                                    )) : null}\r\n                            </TableBody>\r\n                        </TblContainer>\r\n                        <TblPagination />\r\n                    </Paper>\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default TransactionRecord;"],"sourceRoot":""}