{"version":3,"sources":["components/Patient/PatientProfile/TransactionRecord/TransactionEntry/TransactionEntry.js","components/Patient/PatientProfile/TransactionRecord/TransactionEntry/TransactionEntry.module.css"],"names":["TransactionEntry","props","useState","transactionDate","drugs","quantities","amount","fieldErrors","setFieldErrors","isLoading","setIsLoading","_id","name","price","quantity","drugInfo","setDrugInfo","calculate","items","console","log","i","length","drug","useReducer","currentPurchaseState","action","type","transaction","currentState","newQtyAdd","push","newDrugsAdd","newQtyRemove","splice","index","newDrugsRemove","remark","Error","purchaseState","dispatch","useEffect","transactionId","requestBody","query","variables","id","fetch","graphqlServerUrl","method","body","JSON","stringify","headers","localStorage","getItem","then","res","status","json","data","transactions","substring","catch","err","validateField","value","cancelErrors","drugErrors","quantityErrors","onOtherFieldChange","event","fieldName","target","onSubmit","preventDefault","allError","Date","toISOString","patientId","resData","errors","alert","createTransaction","cancelModal","entryChangeHandler","className","classes","htmlFor","join","onChange","drugsBought","key","currDrugs","onAutoCompleteChange","options","Array","isArray","getOptionLabel","option","style","width","height","renderInput","params","label","variant","error","spacer","currentQuantities","onQuantityChange","onClick","fill","cursor","marginTop","generateDrugItem","resize","rows","cols","button","module","exports"],"mappings":"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","file":"static/js/7.06dbc98b.chunk.js","sourcesContent":["import React, { Fragment, useState, useReducer, useEffect } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\r\nimport { IconButton } from '@material-ui/core';\r\n\r\nimport { graphqlServerUrl } from '../../../../../assets/String';\r\nimport classes from './TransactionEntry.module.css';\r\n// import drugNames from '../../../../../assets/DrugNames';\r\n// import drugChart from '../../../../../assets/DrugChart';\r\nimport Loader from '../../../../../UI/Loader/Loader';\r\n\r\nconst TransactionEntry = (props) => {\r\n    \r\n    const [fieldErrors, setFieldErrors] = useState({\r\n        transactionDate: false,\r\n        drugs: [false],\r\n        quantities: [false],\r\n        amount: false,\r\n    })\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [drugInfo, setDrugInfo] = useState([{\r\n        _id: \"\",\r\n        name: \"\",\r\n        price: \"\",\r\n        quantity: \"\"\r\n    }]);\r\n    \r\n    const calculate = (items, quantities) => {\r\n        \r\n        let amount = 0;\r\n        console.log(\"Calculate: \" +drugInfo);\r\n        for (let i = 0; i < items.length; i++) {\r\n                for (const drug of drugInfo) {\r\n                    if (drug.name === items[i] && quantities) {\r\n                        amount += drug.price * quantities[i];\r\n                        break;\r\n                    }\r\n                \r\n            } \r\n        }\r\n        return amount;\r\n    }\r\n\r\n    const drugPurchaseReducer = (currentPurchaseState, action) => {\r\n        switch (action.type) {\r\n            case 'Initialize':\r\n                return {\r\n                    ...currentPurchaseState,\r\n                    ...action.transaction,\r\n                }\r\n            case 'Submit':\r\n                return {\r\n                    ...currentPurchaseState,\r\n                    amount: action.amount,\r\n                };\r\n            case 'Calculate':\r\n                return {\r\n                    ...currentPurchaseState,\r\n                    quantities: action.quantities,\r\n                    drugs: action.drugs,\r\n                    amount: calculate(action.drugs, action.quantities),\r\n                }\r\n            case 'Update':\r\n                return {\r\n                    ...action.currentState\r\n                }\r\n            case 'AddItem':\r\n                const newQtyAdd = [...currentPurchaseState.quantities];\r\n                newQtyAdd.push(\"\");\r\n                const newDrugsAdd = [...currentPurchaseState.drugs];\r\n                newDrugsAdd.push(\"\");\r\n                return {\r\n                    ...currentPurchaseState,\r\n                    quantities: newQtyAdd,\r\n                    drugs: newDrugsAdd,\r\n                }\r\n            case 'DeleteItem':\r\n                const newQtyRemove = [...currentPurchaseState.quantities];\r\n                newQtyRemove.splice(action.index, 1);\r\n                const newDrugsRemove = [...currentPurchaseState.drugs];\r\n                newDrugsRemove.splice(action.index, 1);\r\n\r\n                return {\r\n                    ...currentPurchaseState,\r\n                    quantities: newQtyRemove,\r\n                    drugs: newDrugsRemove,\r\n                    amount: calculate(newDrugsRemove, newQtyRemove)\r\n                }\r\n            case 'Reset':\r\n                return {\r\n                    transactionDate: \"\",\r\n                    drugs: [\"\"],\r\n                    quantities: [\"\"],\r\n                    remark: \"\",\r\n                    amount: \"\",\r\n                }\r\n            default:\r\n                throw new Error('Should not get there!');\r\n        }\r\n    };\r\n\r\n    const [purchaseState, dispatch] = useReducer(drugPurchaseReducer,\r\n        {\r\n            transactionDate: \"\",\r\n            drugs: [\"\"],\r\n            quantities: [\"\"],\r\n            remark: \"\",\r\n            amount: \"\",\r\n        });\r\n\r\n  \r\n\r\n    const addDrugItemHandler = () => {\r\n        dispatch({ type: \"AddItem\" });\r\n    }\r\n\r\n    const deleteDrugItemHandler = (index) => {\r\n        dispatch({ type: \"DeleteItem\", index: index });\r\n    }\r\n\r\n    //for exisiting transaction entries\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        if (props.transactionId) {\r\n            const requestBody = {\r\n                query: `\r\n                     query Transactions($id:ID) {\r\n                       transactions(_id:$id) {\r\n                        _id\r\n                        transactionDate\r\n                        drugs\r\n                        quantities\r\n                        remark\r\n                        amount\r\n                       }\r\n                       drugs {\r\n                           _id\r\n                           name\r\n                           price\r\n                       }\r\n                     }\r\n                  `,\r\n                variables: {\r\n                    id: props.transactionId\r\n                }\r\n            };\r\n            fetch(graphqlServerUrl, {\r\n                method: 'POST',\r\n                body: JSON.stringify(requestBody),\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + localStorage.getItem(\"dispenseToken\")\r\n                }\r\n            }).then(res => {\r\n                if (res.status !== 200 && res.status !== 201) {\r\n                    throw new Error(\"Failed\");\r\n                }\r\n                return res.json();\r\n            }).then(res => {\r\n\r\n                dispatch({\r\n                    type: 'Initialize',\r\n                    transaction: { ...res.data.transactions[0], transactionDate: res.data.transactions[0].transactionDate.substring(0, 10) }\r\n                });\r\n                setDrugInfo(res.data.drugs);\r\n                setIsLoading(false);\r\n\r\n            }).catch(err => {\r\n                setIsLoading(false);\r\n            })\r\n\r\n        } else {\r\n            //set to initial value   \r\n            setIsLoading(true);\r\n            const requestBody = {\r\n                query: `\r\n                     query {\r\n                       drugs {\r\n                           _id\r\n                           name\r\n                           price\r\n                       }\r\n                     }\r\n                  `\r\n            };\r\n            fetch(graphqlServerUrl, {\r\n                method: 'POST',\r\n                body: JSON.stringify(requestBody),\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + localStorage.getItem(\"dispenseToken\")\r\n                }\r\n            }).then(res => {\r\n                if (res.status !== 200 && res.status !== 201) {\r\n                    throw new Error(\"Failed\");\r\n                }\r\n                return res.json();\r\n            }).then(res => {\r\n                setDrugInfo(res.data.drugs);\r\n                dispatch({ type: 'Reset' });\r\n                setIsLoading(false);\r\n            }).catch(err => {\r\n                setIsLoading(false);\r\n            })\r\n        }\r\n        setFieldErrors({\r\n            transactionDate: false,\r\n            amount: false,\r\n            drugs: [false],\r\n            quantities: [false]\r\n        })\r\n    }, [props]);\r\n\r\n    const validateField = (value) => {\r\n        if (value && value !== \"\") {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        let allError = false;\r\n        const drugErrors = [];\r\n        const quantityErrors = [];\r\n\r\n        for (const drug of purchaseState.drugs) {\r\n            allError = allError || validateField(drug);\r\n            drugErrors.push(validateField(drug));\r\n        }\r\n\r\n        for (const quantity of purchaseState.quantities) {\r\n            allError = allError || validateField(quantity);\r\n            quantityErrors.push(validateField(quantity));\r\n        }\r\n        // allError = allError || validateField(purchaseState.amount);\r\n        allError = allError || validateField(purchaseState.transactionDate);\r\n\r\n        if (allError) {\r\n            setFieldErrors({\r\n                drugs: drugErrors,\r\n                quantities: quantityErrors,\r\n                amount: false,\r\n                transactionDate: validateField(purchaseState.transactionDate)\r\n            })\r\n            return;\r\n        }\r\n\r\n        let queryValue;\r\n\r\n        if (props.transactionId) {\r\n            queryValue = `  \r\n            mutation UpdateTransaction($transactionId: ID!,$drugs: [String!]!,$quantities: [String!]! ,$id:ID!,$amount: Float!, $remark:String){\r\n               updateTransaction(\r\n                    _id: $transactionId,\r\n                   transactionInput:{\r\n                       transactionDate: \"${new Date(purchaseState.transactionDate).toISOString()}\",\r\n                       drugs:$drugs,\r\n                       quantities:$quantities,\r\n                       patientId: $id, \r\n                       amount: $amount,\r\n                       remark:$remark\r\n                     }\r\n               ) {\r\n                  transactionDate\r\n              }\r\n            }\r\n         `\r\n\r\n        } else {\r\n            queryValue = `  \r\n            mutation CreateTransaction($drugs: [String!]!,$quantities: [String!]! ,$id:ID!,$amount: Float!,$remark:String){\r\n               createTransaction(\r\n                   transactionInput:{\r\n                       transactionDate: \"${new Date(purchaseState.transactionDate).toISOString()}\",\r\n                       drugs:$drugs,\r\n                       quantities:$quantities,\r\n                       patientId: $id, \r\n                       amount: $amount,\r\n                       remark:$remark\r\n                     }\r\n               ) \r\n            }\r\n         `\r\n        }\r\n\r\n        const requestBody = {\r\n            query: queryValue,\r\n            variables: {\r\n                drugs: purchaseState.drugs,\r\n                quantities: purchaseState.quantities,\r\n                id: props.patientId,\r\n                amount: +purchaseState.amount,\r\n                transactionId: props.transactionId,\r\n                remark: purchaseState.remark\r\n            }\r\n        };\r\n\r\n        setIsLoading(true);\r\n        fetch(graphqlServerUrl, {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem(\"dispenseToken\")\r\n            }\r\n        }).then(res => {\r\n            if (res.status !== 200 && res.status !== 201) {\r\n                throw new Error(\"Failed\");\r\n            }\r\n            return res.json();\r\n        }).then(resData => {\r\n            if (resData.errors) {\r\n                setIsLoading(false);\r\n                console.log(resData.errors);\r\n                alert(\"An unexpected error occured!\");\r\n            } else {\r\n                //close modal and display data in transaction record\r\n                console.log(resData.data.createTransaction);\r\n                setIsLoading(false);\r\n                props.cancelModal();\r\n                if (props.transactionId) {\r\n                    props.entryChangeHandler(\"update\", props.transactionId, { ...purchaseState, transactionDate: new Date(purchaseState.transactionDate).toISOString() });\r\n                } else {\r\n                    props.entryChangeHandler(\"create\", null, { ...purchaseState, _id: resData.data.createTransaction, transactionDate: new Date(purchaseState.transactionDate).toISOString() });\r\n                }\r\n            }\r\n        }).catch(err => {\r\n            setIsLoading(false);\r\n            alert(\"An unexpected error occured.\");\r\n        })\r\n    }\r\n\r\n    const cancelErrors = () => {\r\n        const drugErrors = [];\r\n        const quantityErrors = [];\r\n\r\n        for (const drug of purchaseState.drugs) {\r\n            drugErrors.push(false);\r\n            quantityErrors.push(false);\r\n        }\r\n        setFieldErrors({\r\n            transactionDate: false,\r\n            drugs: drugErrors,\r\n            quantities: quantityErrors,\r\n            amount: false\r\n        })\r\n    }\r\n    const onAutoCompleteChange = (i, value) => {\r\n        const currDrugs = [...purchaseState.drugs];\r\n        currDrugs[i - 1] = value ? value.name : \"\";\r\n        dispatch({ type: 'Calculate', drugs: currDrugs, quantities: purchaseState.quantities })\r\n        cancelErrors();\r\n    }\r\n\r\n    const onQuantityChange = (i, event) => {\r\n\r\n        const currentQuantities = [...purchaseState.quantities];\r\n        currentQuantities[i - 1] = event.target.value ? event.target.value : \"\";\r\n        dispatch({ type: 'Calculate', drugs: purchaseState.drugs, quantities: currentQuantities });\r\n        cancelErrors();\r\n    }\r\n\r\n    const onOtherFieldChange = (event, fieldName) => {\r\n\r\n        dispatch({ type: 'Update', currentState: { ...purchaseState, [fieldName]: event.target.value ? event.target.value : \"\" } });\r\n        cancelErrors();\r\n    }\r\n\r\n    const generateDrugItem = () => {\r\n        const drugsBought = [];\r\n\r\n        for (let i = 1; i <= purchaseState.drugs.length; i++) {\r\n            drugsBought.push(\r\n                (\r\n                    <Fragment key={\"fragment\" + i}>\r\n                        <section className={classes['section-container']}>\r\n                            <div >\r\n                                <Autocomplete\r\n                                    value={purchaseState.drugs ? { name: purchaseState.drugs[i - 1] } :\r\n                                        {\r\n                                            id: \"\",\r\n                                            name: \"\",\r\n                                            price: \"\",\r\n                                            quantity: \"\"\r\n                                        }}\r\n                                    onChange={(event, value) => onAutoCompleteChange(i, value)}\r\n                                    id={\"drugItem\" + i}\r\n                                    options={Array.isArray(drugInfo)? [...drugInfo, {\r\n                                        id: \"\",\r\n                                        name: \"\",\r\n                                        price: \"\",\r\n                                        quantity: \"\"\r\n                                    }] :[{\r\n                                        id: \"\",\r\n                                        name: \"\",\r\n                                        price: \"\",\r\n                                    }]\r\n                                    }\r\n                                    // options={[...drugNames, { name: \"\" }]}\r\n                                    getOptionLabel={(option) => option[\"name\"]}\r\n                                    style={{ width: 400, height: 50 }}\r\n                                    renderInput={(params) =>\r\n                                        <TextField\r\n                                            {...params}\r\n                                            label={\"Drug Item \" + i}\r\n                                            variant=\"outlined\"\r\n                                            name={\"drugItem\" + i}\r\n                                            // helperText={fieldErrors.drugs[i - 1] ? \"Required\" : \"\"}\r\n                                            error={fieldErrors.drugs[i - 1]}\r\n                                        />\r\n                                    }\r\n                                />\r\n                            </div>\r\n                            <div className={classes.spacer}></div>\r\n                            <div className={classes['section-chlid--vertical']}>\r\n                                <label htmlFor={\"drugItem\" + i + \"Unit\"}>Drug Item {i} Quantity:</label>\r\n                                <input\r\n                                    className={fieldErrors.quantities[i - 1] ? classes[\"error\"] : null}\r\n                                    onChange={(event) => onQuantityChange(i, event)}\r\n                                    value={purchaseState.quantities ? purchaseState.quantities[i - 1] : \"\"}\r\n                                    type=\"number\"\r\n                                    id={\"drugItem\" + i + \"Unit\"}\r\n                                    name={\"drugItem\" + i + \"Unit\"}\r\n                                ></input>\r\n                                {/* {fieldErrors.quantities[i - 1]?\r\n                                    <div className={classes[\"error-text\"]}>Required</div> : null} */}\r\n                                <div>Unit(s)</div>\r\n                            </div>\r\n                            <div className={classes.spacer}></div>\r\n                            {i === 1 ? null :\r\n                                (\r\n                                    <section className={classes['icon-container']}>\r\n                                        <IconButton onClick={() => deleteDrugItemHandler(i - 1)}>\r\n                                            <RemoveCircleIcon style={{ fill: \"red\", cursor: 'pointer' }} />\r\n                                        </IconButton>\r\n                                        <span>Remove drug item</span>\r\n                                    </section>\r\n                                )}\r\n                        </section>\r\n                        <hr style={{ marginTop: 10 }} />\r\n                    </Fragment>\r\n                )\r\n            )\r\n        }\r\n        return drugsBought;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            { isLoading ? <Loader /> :\r\n                (\r\n                    <form onSubmit={onSubmit} className={classes['form']}>\r\n                        <section >\r\n                            <label htmlFor=\"transactionDate\">Transaction Date:</label>\r\n                            <input\r\n                                className={fieldErrors.transactionDate ? [classes[\"error\"], classes[\"spacer\"]].join(' ') : classes[\"spacer\"]}\r\n                                onChange={(event) => onOtherFieldChange(event, \"transactionDate\")}\r\n                                value={purchaseState.transactionDate ? purchaseState.transactionDate : \"\"}\r\n                                type=\"date\" id=\"transactionDate\" name=\"transactionDate\"\r\n                            />\r\n                        </section>\r\n                        {generateDrugItem()}\r\n                        <section className={classes['icon-container']}>\r\n                            <IconButton onClick={addDrugItemHandler}>\r\n                                <AddCircleIcon style={{ fill: \"green\", cursor: 'pointer' }} />\r\n                            </IconButton>\r\n                            <span>Add new drug item</span>\r\n                        </section>\r\n                        <section className={classes['remark-container']}>\r\n                            <label htmlFor=\"remark\" >Remark:</label>\r\n                            <textarea\r\n                                onChange={(event) => onOtherFieldChange(event, \"remark\")}\r\n                                value={purchaseState.remark ? purchaseState.remark : \"\"}\r\n                                style={{ resize: \"none\" }}\r\n                                className={classes['spacer']}\r\n                                rows=\"3\"\r\n                                cols=\"60\"\r\n                                id=\"remark\"\r\n                                name=\"remark\"\r\n                            />\r\n                        </section>\r\n                        <section className={classes['amount-container']}>\r\n                            <label htmlFor=\"amount\">Total paid amount:</label>\r\n                            <input\r\n                                className={fieldErrors.amount ? [classes[\"error\"], classes[\"spacer\"]].join(' ') : classes[\"spacer\"]}\r\n                                onChange={(event) => onOtherFieldChange(event, \"amount\")}\r\n                                value={purchaseState.amount}\r\n                                name=\"amount\"\r\n                                type=\"number\" id=\"amount\" name=\"amount\"\r\n                            />\r\n                            <div>\r\n                                {/* spacer */}\r\n                            </div>\r\n                            <span>(You can modify the amount as some customers might accidentally have paid a wrong amonut)</span>\r\n                        </section>\r\n                        <section className={classes['button-container']}>\r\n                            <button className={classes.button} type=\"submit\">{props.transactionId ? \"Update\" : \"Create\"}</button>\r\n                        </section>\r\n                    </form>)\r\n            }\r\n        </Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default TransactionEntry;\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"TransactionEntry_form__2acg5\",\"icon-container\":\"TransactionEntry_icon-container__2K5OV\",\"section-container\":\"TransactionEntry_section-container__20aXg\",\"section-chlid--vertical\":\"TransactionEntry_section-chlid--vertical__2VkGX\",\"spacer\":\"TransactionEntry_spacer__2Onyb\",\"remark-container\":\"TransactionEntry_remark-container__XTYce\",\"amount-container\":\"TransactionEntry_amount-container__3iFGf\",\"div-container--horiz\":\"TransactionEntry_div-container--horiz__K_FRf\",\"input--long\":\"TransactionEntry_input--long__1ebhG\",\"button\":\"TransactionEntry_button__WZ9TI\",\"button-container\":\"TransactionEntry_button-container__1xgQJ\",\"error\":\"TransactionEntry_error__oVejP\",\"error-text\":\"TransactionEntry_error-text__3f7EQ\"};"],"sourceRoot":""}