{"version":3,"sources":["../node_modules/@material-ui/icons/AddCircle.js","components/Button/Button.module.css","components/Patient/PatientProfile/TransactionRecord/TransactionRecord.module.css","../node_modules/@material-ui/icons/Edit.js","../node_modules/@material-ui/icons/Delete.js","../node_modules/@material-ui/icons/Print.js","../node_modules/@material-ui/core/esm/TableContainer/TableContainer.js","components/Button/Button.js","components/Patient/PatientProfile/TransactionRecord/TransactionRecord.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_default","createElement","d","module","TableContainer","React","props","ref","classes","className","_props$component","component","Component","other","_objectWithoutProperties","_extends","clsx","root","withStyles","width","overflowX","name","Button","buttonNames","map","onClick","cancel","action","key","button","type","TransactionEntry","lazy","useStyles","makeStyles","table","minWidth","TransactionRecord","useState","open","transactionId","openEntry","setOpenEntry","openDeleteModal","setOpenDeleteModal","transactionRecord","setTransactionRecord","isDeleting","setIsDeleting","longestEntryLength","setLongestEntryLength","openEntryHandler","closeEntryHandler","closeDeleteModalHandler","useEffect","requestBody","query","variables","id","patientId","fetch","graphqlServerUrl","method","body","JSON","stringify","headers","localStorage","getItem","then","res","status","Error","json","resData","data","transactions","catch","err","length","tx","Math","max","drugs","operationHandler","operation","entry","transactionRecordCopy","indexDelete","findIndex","ele","_id","splice","indexUpdate","sort","a","b","Date","transactionDate","push","classescss","patientInfo","caseCode","chineseName","englishName","Modal","show","modalClosed","fallback","token","cancelModal","entryChangeHandler","Loader","style","fontSize","alert","IconButton","fill","cursor","Paper","maxHeight","Table","stickyHeader","aria-label","TableHead","TableRow","TableCell","align","Array","x","i","TableBody","row","index","background","window","quantities","amount","substring"],"mappings":"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","file":"static/js/4.8d65d308.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"\n}), 'AddCircle');\n\nexports.default = _default;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__25VVM\",\"button-container\":\"Button_button-container__1v2wv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon-container\":\"TransactionRecord_icon-container__9PZ9A\",\"section-child\":\"TransactionRecord_section-child__r7ML2\",\"spacer\":\"TransactionRecord_spacer__1PcQz\",\"record-container\":\"TransactionRecord_record-container__1gyiH\"};","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3zm-3 11H8v-5h8v5zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1-9H6v4h12V3z\"\n}), 'Print');\n\nexports.default = _default;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    width: '100%',\n    overflowX: 'auto'\n  }\n};\nvar TableContainer = /*#__PURE__*/React.forwardRef(function TableContainer(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableContainer.propTypes = {\n  /**\n   * The table itself, normally `<Table />`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableContainer'\n})(TableContainer);","import React from 'react';\r\nimport classes from \"./Button.module.css\";\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <section className={classes['button-container']}>\r\n            {\r\n            props.buttonNames.map((name) => {\r\n               return <button onClick={name===\"Cancel\"?props.cancel:props.action} key={name} className={classes.button} type=\"button\">{name}</button>\r\n            })}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Button;","import React, { Fragment, useState, useEffect, Suspense } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { IconButton } from '@material-ui/core';\r\n\r\nimport Loader from '../../../../components/Loader/Loader';\r\nimport Button from '../../../Button/Button';\r\nimport { graphqlServerUrl } from '../../../../assets/String';\r\nimport Modal from '../../../Modal/Modal';\r\nimport classescss from './TransactionRecord.module.css';\r\nconst TransactionEntry = React.lazy(() => import('./TransactionEntry/TransactionEntry'));\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 400,\r\n    },\r\n});\r\n\r\nconst TransactionRecord = (props) => {\r\n    const classes = useStyles();\r\n    const [openEntry, setOpenEntry] = useState({ open: false, transactionId: null });\r\n    const [openDeleteModal, setOpenDeleteModal] = useState({ open: false, transactionId: null });\r\n    const [transactionRecord, setTransactionRecord] = useState();\r\n    const [isDeleting, setIsDeleting] = useState(false);\r\n    const [longestEntryLength, setLongestEntryLength] = useState(0);\r\n\r\n    const openEntryHandler = (transactionId) => {\r\n        setOpenEntry({ open: true, transactionId: transactionId });\r\n    }\r\n\r\n    const closeEntryHandler = () => {\r\n        setOpenEntry({ open: false, transactionId: null });\r\n    }\r\n\r\n    const openDeleteModalHandler = (transactionId) => {\r\n        setOpenDeleteModal({ open: true, transactionId: transactionId });\r\n    }\r\n\r\n    const closeDeleteModalHandler = () => {\r\n        setOpenDeleteModal({ open: false, transactionId: null });\r\n    }\r\n\r\n    const deleteHandler = () => {\r\n        const requestBody = {\r\n            query: `\r\n                 mutation DeleteTransaction($transactionId:ID!) {\r\n                   deleteTransaction(_id:$transactionId)\r\n                 }\r\n              `,\r\n            variables: {\r\n                transactionId: openDeleteModal.transactionId\r\n            }\r\n        };\r\n\r\n        setIsDeleting(true);\r\n        fetch(graphqlServerUrl, {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer '+ localStorage.getItem('dispenseToken')\r\n            }\r\n        }).then(res => {\r\n            if (res.status !== 200 && res.status !== 201) {\r\n                throw new Error(\"Failed\");\r\n            }\r\n            return res.json();\r\n        }).then(resData => {\r\n            setIsDeleting(false);\r\n            closeDeleteModalHandler();\r\n            operationHandler(\"delete\",openDeleteModal.transactionId,null);\r\n        }).catch(err => {\r\n            alert(err);\r\n            setIsDeleting(false);\r\n        })\r\n    }\r\n\r\n    //fetch transactionrecord\r\n    useEffect(() => {\r\n        const requestBody = {\r\n            query: `\r\n                 query Transactions($id:ID) {\r\n                   transactions(_id:$id) {\r\n                    _id\r\n                    transactionDate\r\n                    drugs\r\n                    quantities\r\n                    remark\r\n                    amount\r\n                   }\r\n                 }\r\n              `,\r\n            variables: {\r\n                id: props.patientId\r\n            }\r\n        };\r\n        fetch(graphqlServerUrl, {\r\n            method: 'POST',\r\n            body: JSON.stringify(requestBody),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer '+ localStorage.getItem('dispenseToken')\r\n            }\r\n        }).then(res => {\r\n            if (res.status !== 200 && res.status !== 201) {\r\n                throw new Error(\"Failed\");\r\n            }\r\n            return res.json();\r\n        }).then(resData => {\r\n            setTransactionRecord(resData.data.transactions);\r\n\r\n        }).catch(err => {\r\n\r\n        })\r\n    }, [props]);\r\n\r\n    useEffect(() => {\r\n        if (transactionRecord) {\r\n            let length = 0;\r\n            transactionRecord.map((tx) => {\r\n                length = Math.max(length, tx.drugs.length);\r\n            })\r\n\r\n            setLongestEntryLength(length);\r\n        }\r\n    }, [transactionRecord]);\r\n\r\n    const openInNewTab = (id) => {\r\n        const newWindow = window.open(\"/print/\" + id, '_blank', 'noopener,noreferrer')\r\n        // if (newWindow) newWindow.opener = null\r\n    }\r\n\r\n    const operationHandler = (operation , id, entry) => {\r\n        const transactionRecordCopy = [...transactionRecord];\r\n       switch(operation) {\r\n           case \"delete\":\r\n            const indexDelete = transactionRecordCopy.findIndex(ele=> ele._id === id);\r\n            transactionRecordCopy.splice(indexDelete,1);\r\n            setTransactionRecord(transactionRecordCopy);\r\n            break;\r\n           case \"update\":\r\n            const indexUpdate = transactionRecordCopy.findIndex(ele=> ele._id === id);\r\n            transactionRecordCopy[indexUpdate] = {...entry};\r\n            transactionRecordCopy.sort((a, b)=> {\r\n                return new Date(b.transactionDate) - new Date(a.transactionDate);\r\n              })\r\n            setTransactionRecord(transactionRecordCopy);\r\n            break;\r\n           case \"create\":   \r\n            transactionRecordCopy.push({...entry});\r\n            transactionRecordCopy.sort((a, b)=> {\r\n                return new Date(b.transactionDate) - new Date(a.transactionDate);\r\n              })\r\n            setTransactionRecord(transactionRecordCopy);\r\n           break; \r\n       }\r\n        \r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={classescss[\"record-container\"]}>\r\n                <h2>{props.patientInfo[0].caseCode + \" \" + props.patientInfo[0].chineseName + \"(\" + props.patientInfo[0].englishName + \")\"}</h2>\r\n\r\n                {/* Modal pops up when clicked */}\r\n                <Modal show={openEntry.open} modalClosed={closeEntryHandler}>\r\n                    <Suspense fallback={<div>Loading...</div>}>\r\n                        <TransactionEntry\r\n                        token={localStorage.getItem('dispenseToken')} \r\n                        cancelModal={closeEntryHandler} \r\n                        patientId={props.patientId} \r\n                        transactionId={openEntry.transactionId} \r\n                        entryChangeHandler ={operationHandler} \r\n                        />\r\n                    </Suspense>\r\n                </Modal>\r\n                <Modal show={openDeleteModal.open} modalClosed={closeDeleteModalHandler}>\r\n                    {isDeleting ? <Loader /> :\r\n                        <Fragment>\r\n                            <p style={{fontSize: \"large\"}}>Are you sure you want to delete this transaction entry?</p>\r\n                            <Button buttonNames={[\"Delete\", \"Cancel\"]} action={deleteHandler} cancel={closeDeleteModalHandler} />\r\n                        </Fragment>}\r\n                </Modal>\r\n\r\n                <div className={classescss['icon-container']}>\r\n                    <IconButton onClick={() => openEntryHandler(null)}>\r\n                        <AddCircleIcon style={{ fill: \"green\", cursor: 'pointer' }} />\r\n                    </IconButton>\r\n                    <span>Add new entry</span>\r\n                </div>\r\n                {transactionRecord && transactionRecord.length === 0 ?\r\n                    <p>The patient does not have any transaction record.</p> :\r\n                    <TableContainer component={Paper} style={{ maxHeight: 450 }}>\r\n                        <Table stickyHeader className={classes.table} aria-label=\"simple table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell align=\"center\">Edit</TableCell>\r\n                                    <TableCell align=\"center\">Print</TableCell>\r\n                                    {[...Array(longestEntryLength)].map((x, i) =>\r\n                                        <Fragment key={i}>\r\n                                            <TableCell align=\"right\">Drug&nbsp;Item&nbsp;{i + 1}</TableCell>\r\n                                            <TableCell align=\"right\">Drug&nbsp;Item&nbsp;{i + 1}&nbsp;Qty</TableCell>\r\n                                        </Fragment>\r\n                                    )}\r\n                                    <TableCell align=\"right\">Paid&nbsp;Amount&nbsp;</TableCell>\r\n                                    <TableCell align=\"right\">Transaction&nbsp;Date&nbsp;</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {transactionRecord ?\r\n                                    transactionRecord.map((row, index) => (\r\n                                        <TableRow key={row._id} style={index % 2 ? { background: \"#e9e9e9\" } : { background: \"white\" }}>\r\n                                            <TableCell align=\"center\">\r\n                                                <IconButton onClick={() => openEntryHandler(row._id)}>\r\n                                                    <EditIcon style={{ fill: \"#1053ab\", cursor: 'pointer' }} />\r\n                                                </IconButton>\r\n                                                <IconButton onClick={() => openDeleteModalHandler(row._id)}>\r\n                                                    <DeleteIcon style={{ fill: \"black\", cursor: 'pointer' }} />\r\n                                                </IconButton>\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                <IconButton onClick={() => openInNewTab(row._id)}>\r\n                                                    <PrintIcon style={{ fill: \"#ab9910\", cursor: 'pointer' }} />\r\n                                                </IconButton>\r\n                                            </TableCell>\r\n                                            {[...Array(longestEntryLength)].map((x, i) =>\r\n                                                <Fragment key={i}>\r\n                                                    <TableCell align=\"right\">{i >= row.drugs ? null : row.drugs[i]}</TableCell>\r\n                                                    <TableCell align=\"right\">{i >= row.quantities ? null : row.quantities[i]}</TableCell>\r\n                                                </Fragment>\r\n                                            )}\r\n                                            <TableCell align=\"right\">{row.amount}</TableCell>\r\n                                            <TableCell align=\"right\">{row.transactionDate.substring(0, 10)}</TableCell>\r\n                                        </TableRow>\r\n                                    )) : null}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default TransactionRecord;"],"sourceRoot":""}